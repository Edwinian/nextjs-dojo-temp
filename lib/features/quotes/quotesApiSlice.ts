// Need to use the React-specific entry point to import `createApi`
import { createApi, fetchBaseQuery } from "@reduxjs/toolkit/query/react";

export interface Quote {
  id: number;
  quote: string;
  author: string;
}

export interface QuotesApiResponse {
  quotes: Quote[];
  total: number;
  skip: number;
  limit: number;
}

type QuotesApiParams = number

export interface AddQuoteArgs {
  quote: string;
  author: string;
}

// Define a service using a base URL and expected endpoints
export const quotesApiSlice = createApi({
  baseQuery: fetchBaseQuery({ baseUrl: "https://dummyjson.com/quotes" }),
  reducerPath: "quotesApi",
  tagTypes: ["Quotes"],
  endpoints: (build) => ({
    getQuotes: build.query<QuotesApiResponse, QuotesApiParams>({
      query: (limit = 10) => `?limit=${limit}`,
      providesTags: (result, error, id) => [{ type: "Quotes", id }, { type: "Quotes", id: "LIST" }],
    }),
    addQuote: build.mutation<Quote, AddQuoteArgs>({
      query: ({ quote, author }) => ({
        url: '', // Adjust to the correct endpoint, e.g., '/add'
        method: 'POST',
        body: { quote, author },
      }),
      invalidatesTags: (result, error, args) => [
        { type: "Quotes", id: "LIST" }, // Invalidate all getQuotes queries using LIST
        // Optionally, invalidate specific limit, e.g., { type: "Quotes", id: 10 }
      ],
    }),
  }),
});

// Hooks are auto-generated by RTK-Query
// Same as `quotesApiSlice.endpoints.getQuotes.useQuery`
export const { useGetQuotesQuery } = quotesApiSlice;
